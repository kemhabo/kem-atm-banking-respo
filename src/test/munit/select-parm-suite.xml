<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="select-parm-suite.xml" />
	<munit:test name="select-parmFlow-testSuccess" doc:id="df6b08c8-57f9-4692-a576-731f9aa78f58" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="985c3306-d3e4-49ed-904f-6137512e3b7d" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="26e965f5-5f3f-4268-b1bf-baca322b7cef" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://selectparmFlowtestSuccess\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://selectparmFlowtestSuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="atmTrans" value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="atmQpar" value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="d4e1d869-0cc2-44ed-bd3b-5860075345d2" >
				<munit:payload value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://selectparmFlowtestSuccess\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://selectparmFlowtestSuccess\set-event_variable_.dwl')]" />
					<munit:variable key="atmTrans" value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="atmQpar" value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\set-event_variable_2.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to select-parmFlow" doc:id="a7352852-e09f-41f0-ba5f-dc4fba890068" name="select-parmFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b416d81c-0f87-40a3-b015-feb7de12a0b0" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import selectparmFlowtestSuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	
		<munit:test name="select-parmFlow-testError" doc:id="df6b08c8-57f9-4692-a576-731f9aa78f58" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="985c3306-d3e4-49ed-904f-6137512e3b7d" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="26e965f5-5f3f-4268-b1bf-baca322b7cef" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					
					<munit-tools:error typeId="ANY" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://selectparmFlowtestSuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="atmTrans" value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="atmQpar" value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			
</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="d4e1d869-0cc2-44ed-bd3b-5860075345d2" >
				<munit:payload value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://selectparmFlowtestSuccess\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://selectparmFlowtestSuccess\set-event_variable_.dwl')]" />
					<munit:variable key="atmTrans" value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="atmQpar" value="#[output application/json --- readUrl('classpath://selectparmFlowtestSuccess\set-event_variable_2.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="a25249b7-242c-4709-bead-674a18af08b1" >
				<flow-ref doc:name="Flow-ref to select-parmFlow" doc:id="a7352852-e09f-41f0-ba5f-dc4fba890068" name="select-parmFlow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="9f9c6cfa-0194-4e3d-9e82-1d438f5ef3a5" >
						<logger level="INFO" doc:name="Logger" doc:id="26b8fe9b-aa37-41d5-89c3-fa41c6833425" message="!!!!!!!!!!!!!!!!!!!!!!abc!!!!!!!!!!!!!!!!!!!!"/>
					</on-error-continue>
				</error-handler>
			</try>

		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert that" doc:id="e033a855-6036-4d09-a3c4-584ae88ee566" expression="#[error]" is="#[MunitTools::equalTo(error.description)]"/>

		</munit:validation>
	
</munit:test>


</mule>
